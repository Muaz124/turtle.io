{"name":"turtle.io","tagline":"Web server with virtual hosts for node.js","body":"# turtle.io\r\n\r\n[![build status](https://secure.travis-ci.org/avoidwork/turtle.io.svg)](http://travis-ci.org/avoidwork/turtle.io) [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/avoidwork/turtle.io?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nturtle.io is very easy to get up and running! All you need to do is install it, and tell it what directory holds your web sites, & which hostnames to answer for.\r\n\r\nYou can also create complex web applications, with a familiar API.\r\n\r\n## Getting Started\r\n1. Install the module with: `npm install turtle.io`\r\n2. Create a script to load & start a server. You could use `sample.js` in the turtle.io directory (./node_modules/turtle.io) as a template, or see the examples below\r\n3. [Optional] You can override defaults by passing the factory an Object\r\n\r\nThe following examples assume you've installed turtle.io into `/opt/turtleio`, if this is not the case you need to edit the applicable file to correct the path.\r\n\r\n#### Upstart\r\nUse the provided upstart recipe: `sudo sh -c 'cp node_modules/turtle.io/turtleio.conf /etc/init; initctl reload-configuration; service turtleio start;'`\r\n\r\n#### Systemd\r\nUse the provided systemd service: `sudo sh -c 'cp node_modules/turtle.io/turtleio.service /etc/systemd/system; systemctl enable turtleio; systemctl start turtleio;'`\r\n\r\n#### What about Windows?\r\nIt runs great on Windows, but you're on your own to daemonize it!\r\n\r\n## Examples\r\nturtle.io requires a ***default*** virtual host to be specified, because it is the failover when a request can't be routed.\r\n\r\n#### Virtual hosts\r\nVirtual host keys are the hostname, and the value is the directory relative to \"root\".\r\n\r\n```javascript\r\nvar turtleio = require(\"turtle.io\");\r\nvar server = turtleio({\r\n    default: \"mysite.com\",\r\n    port: 80,\r\n    uid: 100,\r\n    root: \"/var/www\",\r\n    hosts: {\r\n        \"mysite.com\"         : \"mysite.com\",\r\n        \"another-domain.com\" : \"another-domain.com\"\r\n    }\r\n});\r\n\r\nserver.start();\r\n```\r\n\r\n## Benchmark with express.js\r\n`siege` was used instead of `ab` because we want to compare _accurate_ transaction rates.\r\n\r\n#### Specs\r\n- **Machine** MacBook Air (Early '14) / Core i7 @ 1.7Ghz / 8GB ram / 512 flash / OS X 10.10.2\r\n- **ulimit** 2560\r\n- **express** 4.11.2\r\n- **turtle.io** 3.2.2\r\n- **benchmark** ```siege -c100 -b -q -H 'Connection: Keep-Alive' -t15S localhost:$@```\r\n\r\n#### Test\r\n##### express.js\r\n`Hello World!` from a route (content-length: 12), no `allow` header.\r\n\r\n```javascript\r\nvar express = require(\"express\"),\r\n    app = express();\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('Hello World!')\r\n})\r\n\r\napp.listen(3000);\r\n```\r\n\r\n##### turtle.io\r\n`Hello World!` html file streamed from disk (content-length: 53), has accurate `allow` header.\r\n\r\n```javascript\r\n\"use strict\";\r\n\r\nvar turtleio = require(\"index.js\"),\r\n    app;\r\n\r\napp = turtleio({\r\n\tdefault: \"test\",\r\n\troot: __dirname + \"/sites\",\r\n\tport: 8000,\r\n\thosts: {\r\n\t\t\"test\" : \"test\"\r\n\t},\r\n\tlogging: {\r\n\t\tenabled: false\r\n\t}\r\n}).start();\r\n```\r\n\r\n#### Transactions/s\r\nTransaction rates are similar.\r\n- **turtle.io** ```[1233.78, 1203.2, 1187.44]  (1208.14 avg)```\r\n- **express**   ```[1105.85, 1124.25, 1167.57] (1132.56 avg)```\r\n\r\n## Handling Uploads\r\nThe `request` object is passed to every route handler as the second argument, will have a `body` property with the payload from the Client. It will not be coerced to another format, so if you expect JSON, you'll have to `JSON.parse()` it yourself (for now).\r\n\r\n## API & decoration\r\n#### request\r\n##### allow\r\n_String_\r\n\r\nAllowed HTTP methods\r\n\r\n##### ip\r\n_Number_\r\n\r\nRequest IP\r\n\r\n##### parsed\r\n_Object_\r\n\r\nParsed HTTP request\r\n\r\n##### query\r\n_String_\r\n\r\nParsed query string\r\n\r\n##### server\r\n_Object_\r\n\r\nturtle.io instance\r\n\r\n##### host\r\n_String_\r\n\r\nVirtual host handling the request.\r\n\r\n#### response\r\n##### error\r\n_Function (status, body)_\r\n\r\nSend an error response.\r\n\r\n##### redirect\r\n_Function (url)_\r\n\r\nSend a redirection.\r\n\r\n##### respond\r\n_Function (body[, status, headers])_\r\n\r\nSend a response.\r\n\r\n##### send\r\n_Function (body[, status, headers])_\r\n\r\nSend a response.\r\n\r\n## Configuration\r\nConfiguration values can be set by passing an Object to the factory, or any time afterward.\r\n\r\n#### address\r\n_String (0.0.0.0)_\r\n\r\nNetwork address to listen on.\r\n\r\n#### cacheSize\r\n_Number (1000)_\r\n\r\nSize of LRU cache for Etag validation.\r\n\r\n#### catchAll\r\n_Boolean (true)_\r\n\r\nHandle unterminated requests.\r\n\r\n#### compress\r\n_Boolean (true)_\r\n\r\nCompress responses when supported.\r\n\r\n#### default\r\n_String_\r\n\r\n***[Required]*** Default hostname to handle requests which are not specified within _vhosts_; must be a valid entry within _vhosts_.\r\n\r\n#### headers\r\n_Object_\r\n\r\nResponse headers. CORS is enabled by default.\r\n\r\n#### hosts\r\n_Object_\r\n\r\n***[Required]*** Virtual hosts the server will respond for, `key` is the hostname & `value` is the directory relative to `root`.\r\n\r\n#### index\r\n_Array_\r\n\r\nFiles to look for when accessing a directory resource.\r\n\r\n#### json\r\n_Number (2)_\r\n\r\nDefault \"pretty\" ident size\r\n\r\n#### logging\r\n_Object_\r\n\r\nLogging configuration.\r\n\r\n#### logging.enabled\r\n_Boolean_ (true)\r\n\r\nOverride & disable `stdout` emitting by setting to `false`.\r\n\r\n#### logging.format\r\n_String_ (%v %h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\")\r\n\r\nCommon Log Format string of tokens, defaulting to standard Virtual Host format.\r\n\r\n#### logging.level\r\n_String_ (\"info\")\r\n\r\nMinimum Common Log Level which is emitted to `stdout`.\r\n\r\n#### logging.time\r\n_String_ (D/MMM/YYYY:HH:mm:ss ZZ)\r\n\r\nFormat for the date/time portion of a log message.\r\n\r\n#### maxBytes\r\n_Number (1048576)_\r\n\r\nMaximum request body size; when exceeded a 429 is sent.\r\n\r\n#### port\r\n_Number (8000)_\r\n\r\nPort the server will listen on.\r\n\r\n#### root\r\n_String (\"\")_\r\n\r\nRelative path to the web root directory.\r\n\r\n#### seed\r\n_Number (625)_\r\n\r\nSeed for hashing of middleware with MurmurHash3.\r\n\r\n#### ssl.cert\r\n_Object_\r\n\r\n[Optional] SSL certificate\r\n\r\n#### ssl.key\r\n_Object_\r\n\r\n[Optional] SSL certificate key/pem\r\n\r\n#### uid\r\n_Number (null)_\r\n\r\n[Optional] UID the server runs as.\r\n\r\n## License\r\nCopyright (c) 2016 Jason Mulligan  \r\nLicensed under the BSD-3 license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}